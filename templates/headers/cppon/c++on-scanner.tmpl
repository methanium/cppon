/*
 * C++ON - High performance C++17 JSON parser with extended features
 * https://github.com/methanium/cppon
 *
 * File: c++on-scanner.h : C++ON Scanner dispatch and utilities
 *
 * MIT License
 * Copyright (c) 2019-2025 Manuel Zaccaria (methanium) / CH5 Design
 *
 * See LICENSE file for complete license details
 */

#ifndef CPPON_SCANNER_H
#define CPPON_SCANNER_H

[[@UBER ? "" : "c++on-swar.h"]]
[[@UBER ? "" : "c++on-types.h"]]
[[@UBER ? "" : "c++on-thread.h"]]

#if CPPON_USE_SIMD
    [[@UBER ? "" : "../simd/simd_comparisons.h"]]
    [[@UBER ? "" : "../platform/processor_features_info.h"]]
    [[@UBER ? @STDCAPTURE : <atomic>]]

    namespace ch5 {
    namespace scanner {
        // Dynamic detection of SIMD capabilities

        // Lazily bound function pointer dispatch
        using find_quote_fn = size_t(*)(std::string_view, size_t);
        using scan_digits_fn = const char* (*)(std::string_view, size_t);

        inline find_quote_fn bind_find_quote_pos(SimdLevel lvl) noexcept {
            switch (lvl) {
            case SimdLevel::AVX512: return simd::zmm_parallel_find_quote_pos;
            case SimdLevel::AVX2:   return simd::ymm_parallel_find_quote_pos;
            case SimdLevel::SSE:    return simd::xmm_parallel_find_quote_pos;
            default:                return m64_parallel_find_quote_pos;
            }
        }
        inline scan_digits_fn bind_parallel_digits(SimdLevel lvl) noexcept {
            switch (lvl) {
            case SimdLevel::AVX512: return simd::zmm_parallel_digits;
            case SimdLevel::AVX2:   return simd::ymm_parallel_digits;
            case SimdLevel::SSE:    return simd::xmm_parallel_digits;
            default:                return m64_parallel_digits;
            }
        }

        inline void bind_dispatch(SimdLevel lvl) noexcept {
            thread::p_find_quote = bind_find_quote_pos(lvl);
            thread::p_scan_digits = bind_parallel_digits(lvl);
        }


        inline void ensure_dispatch_bound() noexcept {
            bind_dispatch(thread::detect_simd_level());
        }

        // Hot-path APIs
        inline size_t find_quote_pos(std::string_view text, size_t start = 0) noexcept {
            return thread::p_find_quote(text, start);
        }

        inline const char* scan_digits(std::string_view text, size_t start = 0) noexcept {
            return thread::p_scan_digits(text, start);
        }
    }
    }
#else
    // Implementations without SIMD
    namespace ch5 {
    namespace scanner {

        // Scalar implementation (fallback)
        inline size_t find_quote_pos(std::string_view text, size_t start = 0) noexcept {
            return m64_parallel_find_quote_pos(text, start);
        }

        inline const char* scan_digits(std::string_view text, size_t start = 0) noexcept {
            return m64_parallel_digits(text, start);
        }
    }
    }
#endif

#endif // CPPON_SCANNER_H
